created: 20180121015558689
modified: 20190323150005031
revision: 0
tags: Rust
title: 2018.01.20 - Rust
type: text/vnd.tiddlywiki

A difference between //mut// and //shadowing// boils down to creating a new variable when we use the let keyword in shadowing. Shadowing allows you to change a variables type (you can't mutate a variable's type), and also spares you from having to come up with different names.

Types can be divided into two categories: scalar and compound.

The `: u32` in `let guess: u32 = "42".parse().expect("Not a number!");` is type annotation, necessary for when the compiler can't infer the type.

Scalar types represent single values. There are 4 primary scalar types:

* integers
* floating-point numbers
* booleans
* characters

Integer Types:

```
Length	Signed	Unsigned
8-bit	i8	u8
16-bit	i16	u16
32-bit	i32	u32
64-bit	i64	u64
arch	isize	usize (e.g. 64-bit arch vs 32-bit arch)
```

Unsigned integers are always positive; Signed can have be negative (have a negative sign).

Signed integers store values ranging from -(2^^n - 1^^) to 2^^n - 1^^ - 1. Thus, i8 ranges from -128 to 127. Unsigned integers range from 0 to 2^^n - 1^^. Thus, u8 ranges from 0 to 255. 

Note that all number literals except the byte literal allow a type suffix, such as 57u8, and _ as a visual separator, such as 1_000. Integer Literals:

```
Number    	Example
Decimal	        98_222 
Hex	        0xff
Octal	        0o77
Binary	        0b1111_0000
Byte (u8 only)	b'A'
```

Floating point example

```cpp
fn main() {
    let x = 2.0; // f64

    let y: f32 = 3.0; // f32
}
```

The main way to consume boolean values is through conditionals. Example of bool:

```cpp
fn main() {
    let t = true;

    let f: bool = false; // with explicit type annotation
}
```

Char types use single quotes, 'foobar example'. It ranges over unicode.

```cpp
fn main() {
   let c = 'z';
   let z = 'â„¤';
   let heart_eyed_cat = 'ðŸ˜»';
}
```

Compound types can group multiple values of other types into one type. Rust has two primitive compound types: tuples and arrays.

Tuple example:

```cpp
fn main() {
    let tup: (i32, f64, u8) = (500, 6.4, 1);   //or, with inference: let tup = (500, 6.4, 1);

    let (x, y, z) = tup; // destructuring the tuple into variables through pattern matching

    println!("The value of y is: {}", y);

    // We can access a tuple element directly by index too...
    let five_hundred = tup.0;
    let six_point_four = tup.1;
    let one = tup.2;
}
```

Arrays have elements of the same type, and arrays are of fixed length and cannot grow (unlike vectors). Arrays use the stack instead of the heap.

```cpp
fn main() {
    let a = [1, 2, 3, 4, 5];

    let first = a[0];
    let second = a[1];
}
```

If the index is greater than the length, Rust will panic, which is the term Rust uses when a program exits with an error. This error is found in the runtime, not compile time! This is a safety check to prevent you from silently accessing invalid memory (good on you, Rust!).

In function signatures, you must declare the type of each parameter. You pass arguments, the concrete input values, into the parameters specified in the function signature. Separate multiple parameters with commas.

```cpp
fn main() {
    another_function(5, 6); //5 and 6 are the arguments
}

fn another_function(x: i32, y: i32) { //2 parameters with declared types, comma separated
    println!("The value of x is: {}", x);
    println!("The value of y is: {}", y);
}
```

Rust is an expression-based language.