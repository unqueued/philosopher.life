created: 20190113045936031
modified: 20190114061502959
tags: BDS97
title: 2019.01.12 - BDS97: Shit, I Can't Respond Yet

```
[17:28:35] BDS97: home: what's your opinion on ristretto curves?
[17:29:13] BDS97: home: well, that was inaccurate as hell
[17:29:20] BDS97: home: it's basically ed25519
[17:29:55] BDS97: home: but it's encoded in a way that it's indistinguishable from random, as far as I can understand
[17:32:15] BDS97: home: based on your points with the protocol being hard to change, I want to go all-in with the first version
[17:33:03] BDS97: home: we will need to send DH public keys in the clear, that's inevitable (although we can minimize most of it)
[17:34:13] BDS97: home: those are the only parts of the message that could be recognized
[17:34:19] BDS97: home: and that's specifically one thing I want to avoid
[17:34:49] BDS97: home: hell of a lot harder to filter against the protocol if it has no characteristics to filter against
[17:35:53] BDS97: home: I'm rebuilding the old plans, removing unnecessary deviation from libsodium, and adding some features
[17:36:21] BDS97: home: when we already have a shared secret, we can basically send libsodium "boxes" for the outer layer
[17:36:44] BDS97: home: those have a nonce, an auth tag, and the ciphertext in the clear
[17:36:57] BDS97: home: the latter two look random without the key and the nonce is actually random
[17:37:38] BDS97: home: but we'll still need handshakes, and if we want full censorship resistance, those need to look random as well
[17:56:06] BDS97: home: ...and I just understood what elligator is, as opposed to what I thought it was
[17:56:13] BDS97: home: got a bit stuck searching for an implementation
[17:57:34] BDS97: home: dismissing libsodium's actual implementation while at it
[18:10:16] BDS97: home: aaaaand nope, I was still right
[18:10:26] BDS97: home: so, basically the point is
[18:10:41] BDS97: home: elligator is basically a map
[18:11:06] BDS97: home: as in it maps a random-looking string to an elliptic curve point
[18:11:27] BDS97: home: to use it, you need the map itself and its inverse too
[18:11:52] BDS97: home: which is actually pretty straightforward, you basically need an encoding and a decoding function
[18:12:29] BDS97: home: libsodium, apparently, only provides the decoding
[18:12:40] BDS97: home: which is fine for a password authenticated diffie-hellman, but not for general use
[18:40:10] BDS97: home: anyway, I think I'm just gonna make some rust bindings for this https://github.com/Yawning/libelligator
[21:56:35] BDS97: home: alright, new protocol plan done, with some quite weird design choices
[21:56:46] BDS97: home: "delightfully counterintuitive"
[21:57:01] BDS97: home: managed to reduce crypto overhead to 12%
[21:58:12] BDS97: home: onion routing is still first-class, and the protocol is still undetectable as long as the layer 0 handshake gets an Elligator
[21:59:14] BDS97: home: *unfilterable, in the sense that it has nothing distinguishable from random
[21:59:23] BDS97: home: not even the length, that's one of the new features
[21:59:55] BDS97: home: the previous one needed 512 bytes per package, now it's just "at least 54, the longer the better until we run into UDP limits"
```