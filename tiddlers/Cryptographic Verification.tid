created: 20180719034131877
creator: h0p3
modified: 20180726165246510
modifier: h0p3
title: Cryptographic Verification

//See first: {[[Help|Help: On this Wiki]]} & {[[Connect|Ways to Connect to this Wiki]]}//

---
!! About:

//For those cornercases...//

Official distributions of h0p3's Wiki include checksum and signatures files for verifying the integrity and authenticity of your copy. These verification files are updated for every published edit (nearly real-time, you may have to wait a minute for the cronjob and sync). With these files (and the right tools), you will be able to cryptographically verify the entire wiki, which is contained in a single html file (index.html). Let's hope this is never directly useful to us.

I previously used PGP (GnuPG as my last tool) to sign this wiki. PGP has to be one of the worst "best in class" toolsets I've ever used. I hate the software ecosystem, its unusability and incompatibility, as well as its poor logistics and social design. I've wasted far too many hours over almost two decades on that piece of shit. I'm moving on. 

Instead, I'm cutting out the middleman (fuck you, PGP) and more directly using the crypto library I actually trust. I now generate signatures through [[PyNaCL|https://github.com/pyca/pynacl]], a gorgeous binding to the state of the art [[NaCL|https://nacl.cr.yp.to/]] crypto library (imho, we are rapidly moving into a cryptographic monoculture relying exclusively on the NaCL algorithms).<<ref "2">> I believe my key will be useful until quantum computing becomes feasible.<<ref"3">> When PGP is actually functioning, it buys the same verification as my process. The difference is that my process is literally programmable in every major language. It ain't pretty, and it might even be awful. But, it works for me.


---
!! Principles:

* Build tools which maintain fitting degrees of privacy, anonymity, authenticity, and integrity.
* Enable surprising portability, decentrality, and distributivity.
* This wiki's public Ed25519 signature verification key: `5249578e4cdfaec1484f0083df3e8b6e4af0cab0288c8156c31d6e94efe58308`


---
!! Focus:

Authentication is fairly straightforward.

# Download all three of the following files into the same directory:
#* <a href="verify.py">verify.py</a>
#* <a href="index.html.sig">index.html.sig</a>
#* <a href="index.html">index.html</a>
# Run [[verify.py]]
#* Don't forget to first install [[PyNaCL|https://github.com/pyca/pynacl]]; pip is easiest.

Currently, I use SHA256 for the hash integrity check, and I authenticate that checksum with an Ed25519 signature. I've made it simple for you with a script.<<ref "s">> For reference:

{{verify.py}}

To be clear, if you trust the signature verification of the checksum, and you trust the checksum of index.html (if the hashes match, you should), then you trust index.html. Thus, your authenticity+integrity verification demonstrates you possess a bit-for-bit copy of the original signed by someone who possesses this wiki's private signing key.


---
!! Vault:

* Retired: 
** [[Retired: 2017.01.14 -- Cryptographic Verification]]<<ref "4">>
** [[2017.09.10 -- Retired: Cryptographic Verification]]
** [[2018.07.18 -- Retired: Cryptographic Verification]]


---
!! Dreams:

* Enable others to engage in the same process. 
* Use a master key for revokation (just in case).
** https://github.com/warner/python-ed25519
** echo -n "foopassword" | argon2 foosalt -t 100 -m 20 -p 4
*** This is over the top.
** Argon2(pass) -> 1-Ed25519-Pair -> 1-Curve25519-Pair
*** Argon2(1-Ed25519-Pair) -> 2-Ed25519-Pair -> 2-Curve25519-Pair, etc.
*** Go for some arbitrary number. Revokable chain (one descendant at a time) from a single password.
* [[Invisign]]
* Eventually, find a reasonable post-quantum crypto system.
** Not too early, but not too late. Goldilocks it, I guess.


---
<<footnotes "2" "I am aware of that maxim: Don't roll your own crypto. This maxim can be applied at different levels in the cryptography process. While I openly admit my shallow understanding of cryptography, I remain convinced this is a safe exception to that maxim. Famous last words, I know. Talk to me about it if it bothers you, please.">>

<<footnotes "3" "Not that it would ever matter in this case, but I'm not naive enough to think rubber-hose cryptanalysis isn't the first step a state-actor would use against me. Regardless, I still think cryptography is immensely useful to us.">>

<<footnotes "s" "You can either find/write your own tool or use mine to verify the signature.">>

<<footnotes "4" " I believe this was the first official 'Retired:' I ever made on this wiki. For now, I break with my {[[Principles|Principles of Programming Myself]]} conventions to preserve the ornament for myself in the code. Obviously, I didn't know what I wanted, but I figured it out.">>

