created: 20140502162931297
creator: danielo
dependencies: no dependencies
description: add keyboard shortcuts to
modified: 20140502162932480
modifier: danielo
plugin-type: plugin
title: $:/plugins/danielo/keyboardSnippets
type: application/json
version: 0.0.5

{
    "tiddlers": {
        "$:/plugins/danielo/keyboardSnippets/keyboard-snippets.js": {
            "modified": "20140422024102379",
            "modifier": "danielo",
            "text": "/*\\\ntitle: $:/core/modules/widgets/keyboard-snippets.js\ntype: application/javascript\nmodule-type: widget\n\nEdit-text widget\n\n\\*/\n(function(){\n\n/*jslint node: true, browser: true */\n/*global $tw: false */\n\"use strict\";\n\nvar EditTextWidget = require(\"$:/core/modules/widgets/edit-text.js\")[\"edit-text\"];\n\n/*\nThe edit-text widget calls this method just after inserting its dom nodes\n*/\nEditTextWidget.prototype.postRender = function() {\n\tvar self = this;\n\tvar domNode = self.domNodes[0];\n\tthis.KEYMAP = this.wiki.getTiddlerData(\"$:/plugins/danielo/keyboardSnippets/KEYMAP\");\n\tthis.KEYBINDINGS = this.parseKeyBindings(this.wiki.getTiddlerData(\"$:/plugins/danielo/keyboardSnippets/KEYBINDINGS\"));\n\t$tw.utils.addEventListeners(domNode,[\n\t\t{name: \"keydown\", handlerObject: this, handlerMethod: \"insertAtCursor\"}\n\t]);\n\n\n};\n\n\nEditTextWidget.prototype.createKeySnippet = function(preTag,postTag){\n if(typeof arguments[0] == \"object\")\n {\n\t var result = arguments[0];\n\t if(result.hasOwnProperty(\"length\")) return {regExp:result, length:result[0][\"replace\"].length};\n\t if(result.pre && result.post) result.length=result.pre.length;\n\t return result;\n }\n\t\n\treturn {pre:preTag, post:postTag, length:preTag.length };\n};\n\n\nEditTextWidget.prototype.getKeyName = function (keyCode){\n  return this.KEYMAP[keyCode];\n};\n\n\nEditTextWidget.prototype.parseKeyBindings = function (keyCombinations){\nvar keybindings={}; \nif (keyCombinations) {\n\tfor(var comb in keyCombinations){\n\t\tkeybindings[comb.toLowerCase()]=this.createKeySnippet(keyCombinations[comb]);\n\t}\n\treturn keybindings;\n}\n\n keybindings={\n\n\t\t \"ctrl+b\" : this.createKeySnippet(\"''\",\"''\"), //b - bold\n\t\t \"ctrl+i\" : this.createKeySnippet(\"//\",\"//\"), //i --italics\n\t\t \"ctrl+o\" : this.createKeySnippet(\"\\n#\",\" \"), //o - Ordered list\n\t\t \"ctrl+u\" : this.createKeySnippet(\"__\",\"__\"), //u - understrike list\n\t\t \"ctrl+k\" : this.createKeySnippet(\"\\n```\\n\",\"```\"), //k - code\n\t\t \"ctrl+s\" : this.createKeySnippet(\",,\",\",,\"), //s - subscript\n\t\t \"ctrl+l\" : this.createKeySnippet(\"\\n*\",\" \"), //l - list\n\t\t \"ctrl+right_arrow\" : {moveto:\"|\"}\n\t\t};\n\treturn keybindings;\n\t\t\n\n};\n\nEditTextWidget.prototype.composeKeyCombo = function (event){\nvar keyCombo=\"\";\n            if(event.ctrlKey)keyCombo+=\"ctrl+\";\n            if(event.shiftKey)keyCombo+=\"shift+\";\n\t\t\tif(event.altKey)keyCombo+=\"alt+\";\n\t\t\tkeyCombo+=this.getKeyName(event.keyCode);\n\nreturn keyCombo;\n\n};\n\n\n\nEditTextWidget.prototype.insertAtCursor = function (event) {\n    var snippet , myField=this.domNodes[0];\n\n if(snippet=this.KEYBINDINGS[this.composeKeyCombo(event)] )\n  //para evitar sobreescribir otros eventos solo reaccionamos ante combinaciones que\n  //estÃ©n en nuestro map de KEYBINDINGS\n {\n\tvar reacted=false;\n        //Internet explorer\n            if (document.selection) {\n                myField.focus();\n                var sel = document.selection.createRange();\n                sel.text = snippet;\n            }\n            //MOZILLA and others\n            else if (myField.selectionStart || myField.selectionStart == '0') {\n                var selection = this.getSelection(myField);\n                if( snippet.hasOwnProperty(\"moveto\")  ){\n\t\t\t\t\tvar move = selection.followingText.indexOf(snippet.moveto);\n\t\t\t\t\tif(move >=0){ \n\t\t\t\t\t\treacted=true; //only stop default if we have to move\n\t\t\t\t\t\tthis.moveSelection(myField,selection,move+1);\n\t\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\treacted=true;\n\t\t\t\t\tmyField.value = selection.previousText\n\t\t\t\t\t\t+ this.applyTag(snippet,selection.text)\n\t\t\t\t\t\t+ selection.followingText;\n\t\t\t\t\tthis.moveSelection(myField,selection,snippet.length);\n\t\t\t\t}\n            } else {\n                myField.value += snippet;\n            }\n\tif (reacted){ event.preventDefault(); event.stopPropagation();}\n\t\n    this.saveChanges(this.domNodes[0].value);\n    }\n\t\n};\n\n/*selection { object } domNode {dom object} \nlength{number} number of characters to move the selection */\nEditTextWidget.prototype.moveSelection = function(domNode,selection,length){\ndomNode.selectionStart = selection.start + length;\ndomNode.selectionEnd = selection.start + length + selection.text.length;\n};\n\nEditTextWidget.prototype.getSelection = function(domNode){\nvar selStarts=domNode.selectionStart; var selEnds=domNode.selectionEnd;\nreturn {\n\t\tstart:selStarts,\n\t\tend:selEnds,\n\t\ttext:domNode.value.substring(selStarts,selEnds),\n\t\tpreviousText:domNode.value.substring(0, selStarts),\n\t\tfollowingText:domNode.value.substring(selEnds, domNode.value.length)\n\t\t};\n};\n\nEditTextWidget.prototype.applyTag = function(tag,text){\n\tif(tag.hasOwnProperty(\"multiline\")){\n\t\tvar elements = text.split(\"\\n\");\n\t\tfor(var i in elements) \n\t\t\tif(elements[i].length > 1 || elements.length < 2)\n\t\t\t\telements[i]=tag.pre+elements[i]+tag.post;\n\t\t\t\n\t\ttext=elements.join(\"\\n\");\n\t}else if (tag.hasOwnProperty(\"regExp\")){\n\t\tvar regExps = tag.regExp;\n\t\tfor(var i in regExps){\n\t\t\tvar regExp = new RegExp(regExps[i].exp,regExps[i].modificators);\n\t\t\ttext = text.replace(regExp,regExps[i].replace);\n\t\t}\n\t}\t\n\telse{\n\t\ttext=tag.pre+text+tag.post;\n\t}\n\t\n\treturn text;\n\t\n};\n\n})();",
            "type": "application/javascript",
            "title": "$:/plugins/danielo/keyboardSnippets/keyboard-snippets.js",
            "tags": "plugin",
            "module-type": "widget",
            "creator": "danielo",
            "created": "20140418153435777"
        },
        "$:/plugins/danielo/keyboardSnippets/KEYBINDINGS": {
            "modified": "20140422000833962",
            "modifier": "danielo",
            "text": "{ \n \"ctrl+b\" : { \"pre\":\"''\", \"post\":\"''\"}, \n \"ctrl+i\" : { \"pre\":\"//\", \"post\":\"//\"},\n \"ctrl+o\" : { \"pre\":\"#\", \"post\":\" \", \"multiline\":\"true\"},\n \"ctrl+l\" : { \"pre\":\"*\", \"post\":\" \",\"multiline\":\"true\"},\n \"ctrl+m\" : { \"pre\":\"<<\", \"post\":\">>\"},\n \"ctrl+u\" : { \"pre\":\"__\", \"post\":\"__\"}, \n \"ctrl+k\" : { \"pre\":\"\\n```\\n\", \"post\":\"```\"}, \n \"ctrl+s\" : { \"pre\":\",,\", \"post\":\",,\"},\n \"ctrl+alt+t\" : { \"pre\":\"{{\", \"post\":\"}}\"},\n \"ctrl+alt+l\" : { \"pre\":\"[[\", \"post\":\"]]\"},\n \"alt+h\" : { \"pre\":\"|! \", \"post\":\" |\"},\n \"alt+s\" : { \"pre\":\"~~\", \"post\":\"~~\"},\n \"alt+w\" : { \"pre\":\"<$\", \"post\":\"/>\"},\n \"alt+z\" : { \"pre\":\"{{!!\", \"post\":\"}}\"},\n \"ctrl+right_arrow\" : { \"moveto\" : \"|\"},\n  \"alt+t\" : [ {\"exp\":\"^\", \"modificators\":\"gm\", \"replace\":\"| \"},{\"exp\":\"  +\", \"modificators\":\"g\", \"replace\":\" | \"},{\"exp\":\"$\", \"modificators\":\"gm\", \"replace\":\" |\"}]\n\n}",
            "type": "application/json",
            "title": "$:/plugins/danielo/keyboardSnippets/KEYBINDINGS",
            "tags": "plugin",
            "creator": "danielo",
            "created": "20140419050820052"
        },
        "$:/plugins/danielo/keyboardSnippets/KEYCODES": {
            "modified": "20140418180839226",
            "modifier": "danielo",
            "text": "{\n  \"backspace\" : \"8\",\n  \"tab\" : \"9\",\n  \"enter\" : \"13\",\n  \"shift\" : \"16\",\n  \"ctrl\" : \"17\",\n  \"alt\" : \"18\",\n  \"pause_break\" : \"19\",\n  \"caps_lock\" : \"20\",\n  \"escape\" : \"27\",\n  \"page_up\" : \"33\",\n  \"page down\" : \"34\",\n  \"end\" : \"35\",\n  \"home\" : \"36\",\n  \"left_arrow\" : \"37\",\n  \"up_arrow\" : \"38\",\n  \"right_arrow\" : \"39\",\n  \"down_arrow\" : \"40\",\n  \"insert\" : \"45\",\n  \"delete\" : \"46\",\n  \"0\" : \"48\",\n  \"1\" : \"49\",\n  \"2\" : \"50\",\n  \"3\" : \"51\",\n  \"4\" : \"52\",\n  \"5\" : \"53\",\n  \"6\" : \"54\",\n  \"7\" : \"55\",\n  \"8\" : \"56\",\n  \"9\" : \"57\",\n  \"a\" : \"65\",\n  \"b\" : \"66\",\n  \"c\" : \"67\",\n  \"d\" : \"68\",\n  \"e\" : \"69\",\n  \"f\" : \"70\",\n  \"g\" : \"71\",\n  \"h\" : \"72\",\n  \"i\" : \"73\",\n  \"j\" : \"74\",\n  \"k\" : \"75\",\n  \"l\" : \"76\",\n  \"m\" : \"77\",\n  \"n\" : \"78\",\n  \"o\" : \"79\",\n  \"p\" : \"80\",\n  \"q\" : \"81\",\n  \"r\" : \"82\",\n  \"s\" : \"83\",\n  \"t\" : \"84\",\n  \"u\" : \"85\",\n  \"v\" : \"86\",\n  \"w\" : \"87\",\n  \"x\" : \"88\",\n  \"y\" : \"89\",\n  \"z\" : \"90\",\n  \"left_window key\" : \"91\",\n  \"right_window key\" : \"92\",\n  \"select_key\" : \"93\",\n  \"numpad 0\" : \"96\",\n  \"numpad 1\" : \"97\",\n  \"numpad 2\" : \"98\",\n  \"numpad 3\" : \"99\",\n  \"numpad 4\" : \"100\",\n  \"numpad 5\" : \"101\",\n  \"numpad 6\" : \"102\",\n  \"numpad 7\" : \"103\",\n  \"numpad 8\" : \"104\",\n  \"numpad 9\" : \"105\",\n  \"multiply\" : \"106\",\n  \"add\" : \"107\",\n  \"subtract\" : \"109\",\n  \"decimal point\" : \"110\",\n  \"divide\" : \"111\",\n  \"f1\" : \"112\",\n  \"f2\" : \"113\",\n  \"f3\" : \"114\",\n  \"f4\" : \"115\",\n  \"f5\" : \"116\",\n  \"f6\" : \"117\",\n  \"f7\" : \"118\",\n  \"f8\" : \"119\",\n  \"f9\" : \"120\",\n  \"f10\" : \"121\",\n  \"f11\" : \"122\",\n  \"f12\" : \"123\",\n  \"num_lock\" : \"144\",\n  \"scroll_lock\" : \"145\",\n  \"semi_colon\" : \"186\",\n  \"equal_sign\" : \"187\",\n  \"comma\" : \"188\",\n  \"dash\" : \"189\",\n  \"period\" : \"190\",\n  \"forward_slash\" : \"191\",\n  \"grave_accent\" : \"192\",\n  \"open_bracket\" : \"219\",\n  \"backslash\" : \"220\",\n  \"closebracket\" : \"221\",\n  \"single_quote\" : \"222\"\n }",
            "type": "application/json",
            "title": "$:/plugins/danielo/keyboardSnippets/KEYCODES",
            "tags": "plugin",
            "created": "20140418175933770"
        },
        "$:/plugins/danielo/keyboardSnippets/KEYMAP": {
            "modified": "20140418184001124",
            "modifier": "danielo",
            "text": "{\"8\":\"backspace\",\"9\":\"tab\",\"13\":\"enter\",\"16\":\"shift\",\"17\":\"ctrl\",\"18\":\"alt\",\"19\":\"pause_break\",\"20\":\"caps_lock\",\"27\":\"escape\",\"33\":\"page_up\",\"34\":\"page down\",\"35\":\"end\",\"36\":\"home\",\"37\":\"left_arrow\",\"38\":\"up_arrow\",\"39\":\"right_arrow\",\"40\":\"down_arrow\",\"45\":\"insert\",\"46\":\"delete\",\"48\":\"0\",\"49\":\"1\",\"50\":\"2\",\"51\":\"3\",\"52\":\"4\",\"53\":\"5\",\"54\":\"6\",\"55\":\"7\",\"56\":\"8\",\"57\":\"9\",\"65\":\"a\",\"66\":\"b\",\"67\":\"c\",\"68\":\"d\",\"69\":\"e\",\"70\":\"f\",\"71\":\"g\",\"72\":\"h\",\"73\":\"i\",\"74\":\"j\",\"75\":\"k\",\"76\":\"l\",\"77\":\"m\",\"78\":\"n\",\"79\":\"o\",\"80\":\"p\",\"81\":\"q\",\"82\":\"r\",\"83\":\"s\",\"84\":\"t\",\"85\":\"u\",\"86\":\"v\",\"87\":\"w\",\"88\":\"x\",\"89\":\"y\",\"90\":\"z\",\"91\":\"left_window key\",\"92\":\"right_window key\",\"93\":\"select_key\",\"96\":\"numpad 0\",\"97\":\"numpad 1\",\"98\":\"numpad 2\",\"99\":\"numpad 3\",\"100\":\"numpad 4\",\"101\":\"numpad 5\",\"102\":\"numpad 6\",\"103\":\"numpad 7\",\"104\":\"numpad 8\",\"105\":\"numpad 9\",\"106\":\"multiply\",\"107\":\"add\",\"109\":\"subtract\",\"110\":\"decimal point\",\"111\":\"divide\",\"112\":\"f1\",\"113\":\"f2\",\"114\":\"f3\",\"115\":\"f4\",\"116\":\"f5\",\"117\":\"f6\",\"118\":\"f7\",\"119\":\"f8\",\"120\":\"f9\",\"121\":\"f10\",\"122\":\"f11\",\"123\":\"f12\",\"144\":\"num_lock\",\"145\":\"scroll_lock\",\"186\":\"semi_colon\",\"187\":\"equal_sign\",\"188\":\"comma\",\"189\":\"dash\",\"190\":\"period\",\"191\":\"forward_slash\",\"192\":\"grave_accent\",\"219\":\"open_bracket\",\"220\":\"backslash\",\"221\":\"closebracket\",\"222\":\"single_quote\"}",
            "type": "application/json",
            "title": "$:/plugins/danielo/keyboardSnippets/KEYMAP",
            "tags": "plugin",
            "created": "20140418183742933"
        }
    }
}