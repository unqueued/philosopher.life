created: 20161215205512916
modified: 20181226142241974
revision: 0
tags: 
title: Linux & POSIX-Compliant CLI One-Liner Tricks Collection

```
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#                           ,,                                # 
#       MMP""MM""YMM        db        `7MM                    #
#       P'   MM   `7                    MM                    #
#            MM  `7Mb,od8 `7MM  ,p6"bo  MM  ,MP',pP"Ybd       #
#            MM    MM' "'   MM 6M'  OO  MM ;Y   8I   `"       #
#            MM    MM       MM 8M       MM;Mm   `YMMMa.       #
#            MM    MM       MM YM.    , MM `Mb. L.   I8       #
#          .JMML..JMML.   .JMML.YMbmd'.JMML. YA.M9mmmP'       #
#                                                             #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# "do one thing well" one-liners or everyday CLI usage        #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
```



!Print

Print line #'s + Lines from file with specific word in them: `grep -n 'foobare' filename`



Print: all the lines between 10 and 20 of a file

```
sed -n ‘10,20p’ /file/name/here
```

Print: all the lines from 10 to the end of line

```
sed -n ’10,$p’ /file/name/here
```

Print: a specific line number from a file

```
sed -n 5p /file/name/here
```

Print: lines 5 through 10 and 12 inside a file

```
sed -e '5,10d;12d' /file/name/here
```

Print: working directory

```
pwd
```

Print: the last command that would be executed rather than executing it

```
!xyz:p
```

Use `column -t` to align command output

```
grep cpu /proc/stat | column -t
```








!File and Directory: Manipulation, Operations

Store directory to stack

```
pushd directory
```

Set top stack directory as actual directory

```
popd 
```

Create a symbolic link

```
ln -s source link
```

Print logical (physical) path to current directory

```
pwd
```






!Search, Find, Replace, Rename, Text Manipulation

Wildcard find:

```
find . -type f -name "*BenSnow*"
```

Search: for files using file-name (case insensitve)

```
find -iname "foofilename.bar"
```

Search: for a given string in a file (case insensitive)

```
grep -i "foobar" /file/name/here
```

Search: for a given string in all files recursively

```
grep -r "foobar" *
```

Search and replace: old with new string, inside all files

```
grep -rl oldstring . |xargs sed -i -e ‘s/oldstring/newstring/’
```

Search and replace: oldstring with new string inside a file

```
sed -i 's/^Old String Here.*/New String Here/' /file/name/here
```

Rename: all files in a directory to lowercase names

```
for i in `ls -1`; do mv $i "${i,,}" ; done

```

Substitute "foo" with "bar" ONLY for lines which contain "baz"

```
awk '/baz/{gsub(/foo/, "bar")}; 1' filename
```

Substitute "foo" with "bar" EXCEPT for lines which contain "baz"

```
awk '!/baz/{gsub(/foo/, "bar")}; 1' filename
```

Delete ALL blank lines from a file (same as "grep '.' ")

```
awk NF filename && awk '/./' filename
```

Remove duplicate, nonconsecutive lines

```
awk '!($0 in a){a[$0];print}' filename
```

Remove duplicate, consecutive lines (emulates "uniq")

```
awk 'a !~ $0; {a=$0}' filename
```





! Delete

Delete: lines 5 through 10 and 12 inside a file

```
sed -i.bak -e '5,10d;12d' /file/name/here
```

Delete all files in a folder that don't match a certain file extension

```
rm !(*.foo|*.bar|*.baz)
```





! Serve

Serve: current directory tree at http://$HOSTNAME:8000/

```
python -m SimpleHTTPServer
```





! Mount, Partition, Write, Image, Burn

Mount: folder/filesystem through SSH (don't forget folder permissions)

```
sshfs name@server:/path/to/folder /path/to/mount/point
```

Mount: folder/filesystem through SSH with password

```
sshfs -o password_stdin name@server:/path/to/folder /path/to/mount/point <<< "password"
```


Mount: a temporary ram partition

```
mount -t tmpfs tmpfs /mnt -o size=1024m
```

Write: a bootable iso to a drive. You can use //lsblk// to find the drive. Also, note that it's sdX, not sdX1.

```
sudo dd if=/path/to/filename.iso of=/dev/sdX bs=4M
```

Mount: a .iso file in UNIX/Linux

```
mount /path/to/file.iso /mnt/cdrom -oloop
```

Mount BRTFS (compressed) partition

```
mount /dev/sda2 -t btrfs -o noatime,nodiratime,compress=lzo /path

```





! Copy, Cut, Paste, Move, Sync

Copy: all files of .bar type from one directory to another

```
ls *.bar | xargs -n1 -i cp {} /destination/directory/here
```

Copy: all .bar type files in the system to foobar archive

```
find / -name *.bar -type f -print | xargs tar -cvzf foobar.tar.gz
```

Move (cut) all the files and directories from Source directory to Destination directory

```
mv  -v ~/Source/* ~/Destination/
```

Move (cut) all files (but not directories) from Source directory to Destination directory

```
find ~/Source/ -type f -print0 | xargs -0 mv -t ~/Destination
```

Move (cut) all files from Source directory, but not any files within directories in the Source directory to Destination directory (here, -maxdepth option specifies how deep find should try, 1 means, only the directory specified in the find command. You can try using 2, 3 also to test).

```
find ~/Source/ -maxdepth 1 -type f -print0 | xargs -0 mv -t ~/Destination
```




! Run, Kill, Execute, Chmod

Run: the last command as root        

```
sudo !!
```

Run: the last command

```
!!
```

Run: the last command beginning with xyz that I typed

```
!xyz
```

Kill: a process that is locking a file.

```
fuser -k filename
```

Recursive chmod all *.sh files within the current directory

```
find ./ -name "*.sh" -exec chmod +x {} \;
```

Use output of last command as input

```
program `!!`
```



! Process Control and Management

Run command in background

```
command &
```

Run prog2, if prog1 ends with success

```
prog1 && prog2
```

Run prog2, if prog1 ends with error

```
prog1 || prog2 
```

Stop process (SIGSTOP)

```
Ctrl+z
```

List processes running in background

```
jobs
```

Shell is replaced by command

```
exec command
```

Wait for end of background tasks

```
wait
```

List processes and users

```
ps -xau 
```

Get PID by name of process

```
pgrep process
```

Common priority p schedule niceness: -20 (max.) to 19 (min.)

```
nice -n p command
```

Change priority of running process

```
renice -n p -p pid
```

Send signal k to proces id. n, 0, 1 SIGHUP; 2 SIGINT Ctrl+c; 3 SIGQUIT; 9 SIGKILL; 15 SIGTERM; 24 SIGSTOP

```
kill -s k n
```

Run command when signal received

```
trap 'command' signals
```

Send signals to process by name

```
killall name
```

Command will continue after logout

```
nohup command &
```

Print time of process execution

```
time command
```

Print user and system time utilization in current shell

```
times
```

Every s seconds run command

```
watch -n s command
```



! Terminal, CLI, Command line, Screen, Bash

Salvage a borked terminal

```
reset               
```

Close shell keeping all subprocess running

```
^z; bg; disown
```

escape any command aliases

```
\[command]
```

Easy and fast access to often executed commands that are very long and complex, with modifiability internal to the command.

```
some_very_long_and_complex_command # label
```

Proper command nesting instead of backticks

```
echo "The date is: $(date +%D)"
```

List all bash shortcuts

```
bind -P
```





! Remote, SSH, SCP, FTP

Transmit voice data from local microphone to speakers of remote computer through SSH

```
arecord -f dat | ssh -C user@host aplay -f dat
```

SSH connection through host in the middle

```
ssh -t reachable_host ssh unreachable_host
```

Copy: your SSH public key on a remote machine for passwordless login - the easy way

```
ssh-copy-id username@hostname
```

Ghetto VPN proxy through SSH

```
sudo sshuttle -r username@hostname 0/0
```

Remove offending key from known_hosts file with one swift move

```
ssh-keygen -R hostname
```





! Automation

Set audible alarm when an IP address comes online

```
ping -i 60 -a IP_address
```

click a hundred times - every 18 milliseconds - using left mouse button (1 at the end)

```
xdotool click --repeat 100 --delay 18 1
```







! System Administration, Monitor, Log, Troubleshoot, Information Gathering, etc.

Low-level Reboot, even through most freezes

```
<alt> + <print screen/sys rq> + <R> - <E> - <I> - <S> - <U> - <B>
```

Show apps that use internet connection at the moment. 

```
lsof -P -i -n
```

Are you lost? Learn about the File System Hierarchy

```
man hier
```

Get the kernel version (and BSD version)

```
uname -a
```

Full release info of LSB distribution

```
lsb_release -a 
```

Show who is currently logged in

```
who
```

Show date, e.g. "20170225 18:05:57 EST"

```
date +"%Y%m%d %H:%M:%S %Z" 
```

Edit crontab

```
crontab -e 
```






! Help, Information, Manual

Information about command

```
type -a command
```

Brief help on bash command

```
help command
```

Detailed manual for command 

```
man command
```

Detailed manual for command

```
info command
```

Find command

```
man -k command
```






! 3rd (Third) party services

Google Translate - Usage: translate <phrase> <source-language> <output-language>

```
translate(){ wget -qO- "http://ajax.googleapis.com/ajax/services/language/translate?v=1.0&q=$1&langpair=$2|${3:-en}" | sed 's/.*"translatedText":"\([^"]*\)".*}/\1\n/'; }
```
