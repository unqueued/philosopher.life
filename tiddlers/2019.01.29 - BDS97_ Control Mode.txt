[11:15:20] h0p3: lol, that is good bug
[15:10:16] BDS97: home: custom msgpack parser operational
[15:10:25] BDS97: home: we'll need it for control mode
[15:11:02] BDS97: home: currently writing the layer 1 spec, and while it was just an extra at layer 0, it's going to be a requirement at layer 1
[15:12:05] BDS97: home: there are two rust libraries currently on github, both are just... weird
[15:12:21] BDS97: home: you pretty much have to know exactly how your data looks before you try to read it
[15:12:31] BDS97: home: in which case why would you even use msgpack?
[15:12:47] BDS97: home: instead of just writing the binary values into an array and calling it a day
[15:13:10] BDS97: home: anyway, that's a non-issue now, we have our own parser
[15:15:10] BDS97: home: and it's this simple to use
[18:49:35] BDS97: home: and we have encoding too
[20:48:16] h0p3: qTox is annoying me. I set autoaccept on files before. It reverted on me with no intervention. I am sorry.
[20:48:49] h0p3: I would like to speak with you about this: https://deepmind.com/blog/alphastar-mastering-real-time-strategy-game-starcraft-ii/
[20:49:20] h0p3: You are a gamer, you are skilled with computers, and you have the appropriate distrust in authorities to give me answers I trust.
[20:49:42] h0p3: Alright, back to what you are doing!
[20:50:14] BDS97: home: alphastar is very interesting
[20:50:21] BDS97: home: it's getting late here, so maybe tomorrow?
[20:50:25] h0p3: Yes, please.
[20:50:30] h0p3: I will attempt to have something reasonable to ask you.
[20:50:39] h0p3: i'm going to be thinking about msgpacks as well.
[20:51:00] h0p3: looks like the parser solves it.
[20:51:13] h0p3: Is this the array concern you had with tokio?
[20:51:24] h0p3: (you are talking to a complete idiot, I realize)
[20:51:39] BDS97: home: nope, this is a different problem, and one that I actually expected to have to solve manually
[20:51:52] BDS97: home: msgpack is basically a "binary json" kind of format
[20:52:11] h0p3: to make layer 0 and layer 1 talk to each other, basically?
[20:52:13] BDS97: home: simple, universal, and quite small
[20:52:37] BDS97: home: not really, we use it for control mode, which is basically metadata exchange and extensions within a layer
[20:52:52] BDS97: home: layers don't really talk to each other, just build on each other's capabilities
[20:53:03] BDS97: home: layer 1 will communicate over the channel layer 0 builds
[20:53:14] BDS97: home: but it will not directly influence layer 0
[20:53:33] h0p3: metadata goes up from layer 0 to layer 1, right?
[20:53:54] h0p3: (or that may still be wildy wrong; I'm sorry I do not see layer 1 just yet)
[20:54:15] BDS97: home: oh, yeah, sorry, I only have a maybe 25% complete doc yet
[20:54:20] BDS97: home: for layer 1
[20:54:36] BDS97: home: but no, not really
[20:54:41] BDS97: home: remember the tag system on layer 0?
[20:54:45] h0p3: yes
[20:54:56] BDS97: home: where every message has a tag, and you can have X tags per key exchange
[20:55:03] BDS97: home: X is 65535 by default
[20:55:38] BDS97: home: so, if you wanted to increase X to, say, 262144, you would send a control mode packet, asking for 18-bit tags instead of the default 16
[20:55:54] BDS97: home: and the remote would reply with another control mode packet, accepting or rejecting the change
[20:56:01] h0p3: yes
[20:56:08] h0p3: I see
[20:56:13] BDS97: home: it's basically this kind of metadata we use control mode for
[20:56:17] BDS97: home: this is still within layer 0
[20:56:44] BDS97: home: and we use msgpack, because it's a json equivalent, just smaller and better suited for binary stuff
[20:57:09] h0p3: I remember you linking this to me.
[20:57:25] h0p3: Why does it not see more use?
[20:57:52] h0p3: I love how many languages have it available.
[20:58:05] BDS97: home: it does get lots of use
[20:58:12] h0p3: I am ignorant then, sorry*
[20:58:16] BDS97: home: maybe not even when programmers know about it
[20:58:20] BDS97: home: like redis uses it internally
[20:58:33] BDS97: home: and lots of people use redis, probably more than who even knows about msgpack
[20:58:42] BDS97: home: but yeah, that wasn't a stupid question at all
[20:59:16] BDS97: home: json gets a lot more use even though it's terrible with raw binary data, it can do less than msgpack can, and it has an inherently larger size
[20:59:50] h0p3: You appear to find low-hanging fruit performance very well, imho.
[21:00:29] BDS97: home: may have something to do with sitting on this project for years
[21:00:40] BDS97: home: no idea when I came across msgpack, it was years ago too
[21:01:08] BDS97: home: but it's just a useful thing you can mentally note and return to later when it makes sense
[21:01:27] h0p3: aye, collecting tools isn't just toolporn
[21:02:13] BDS97: home: anyway, about the protocol, I'm not done with the layer 1 spec yet, but it will see a lot more use of control mode
[21:02:33] BDS97: home: layer 1 has some basic multiplexing, it is split into an arbitrary number of channels
[21:02:47] BDS97: home: technically, you only need one when you're communicating with a host directly
[21:02:56] BDS97: home: but the rest of those can be used for onion routing
[21:03:09] h0p3: Tell me why only one with a host directly?
[21:03:29] BDS97: home: because layer 3 will also have multiplexing
[21:05:19] h0p3: I want to setup an 50 simultaneous LFTP threads to download a single file, it literally creates 50 SSH connection (doesn't have to be a different port, I believe, but that becomes interestingly complex). How does Atropos simulate or do an even better job of that?
[21:05:51] h0p3: (also, please don't let me keep you up, you can always answer the question tomorrow, next week, or whenever suits you best)
[21:06:33] BDS97: home: SSH uses TCP, and TCP has low window sizes, that's inherently a limitation
[21:06:47] BDS97: home: basically, your window size and ping defines your maximum bandwidth
[21:07:17] h0p3: and our window size will also be limited by all the man-in-the-middle routers between us, right?
[21:07:22] BDS97: home: this will be very important on layer 3, because due to the onion routes that can have a high ping
[21:07:39] BDS97: home: we have two kinds of window sizes in Atropos, with the two kinds of packets
[21:07:56] BDS97: home: layer 1 does some acknowledging, just to keep the physical channels as reliable as possible
[21:08:30] BDS97: home: but it's an unordered protocol, not like TCP
[21:08:58] BDS97: home: it will definitely have a window size though, this is one of the things I'm working on right now
[21:09:31] BDS97: home: previously, that was 65535 logical packets, each being 4 kB in size
[21:10:12] h0p3: any order, from any arbitrary number of onion routes (as in, 10k computers could each send me these packets and I put them together), right?
[21:11:28] BDS97: home: yeah, the way your routes go only depend on you, and layer 1 has 32-bit channel identifiers, with a theoretical maximum of about 4 billion connections
[21:11:51] BDS97: home: in practice this is going to be much lower, it just depends on the nodes, not the protocol
[21:12:21] BDS97: home: so layer 0 channels can send 256 megabytes between each ping, and that's the physical, direct connection
[21:12:41] BDS97: home: I'm not expecting very high pings there, the bottleneck is going to be on layer 3 if anywhere
[21:13:02] BDS97: home: (and that's the previous 65k packet limit, it can be increased)
[21:13:23] BDS97: home: sorry, layer 0/1 channels
[21:13:45] BDS97: home: you can think of it as two distinct parts, layer 0 and 1 handling the physical connections, and layer 2 and 3 the logical ones with the onion routing
[21:14:14] h0p3: I think that is beautiful btw.
[21:14:29] h0p3: I suggest there is a dialectic between 0 and 1, and on top of that a dialectic between 2 and 3.
[21:14:45] h0p3: feels like a spiral or something
[21:15:09] h0p3: There are some people who debate whether or not layer 0 is real.
[21:15:37] BDS97: home: they're definitely very much connected, in the future we might see only two layers remaining
[21:16:01] BDS97: home: but I think they're separate enough to define them like that, especially with the similarity between layer 0 and 2
[21:17:25] BDS97: home: (googling in progress, currently trying to figure out the dialectic thing)
[21:19:04] BDS97: home: anyway, about your 50 simultaneous LFTP thread example
[21:19:18] BDS97: home: the aim is to never have to do that
[21:20:03] h0p3: (if you are interested in a more mathematical representation of dialectics, I think you should look into Linear Logic and Quaternions...indeed, whatever is happening there is at the bottom of Rust's multi-threading a great number of other projects)
[21:20:50] h0p3: Ah, in a way, the aim is to do all of that kind of work on behalf on the application: it will never need to have those kinds of settings.
[21:21:18] h0p3: LFTP single-threading might even possibly be more performant than 50-threads if we do it correctly?
[21:21:48] BDS97: home: yep, that's the plan
[21:22:04] h0p3: Good, we've abstracted the hard part away for others in this.
[21:22:34] BDS97: home: so, basically the plan is
[21:23:01] BDS97: home: layer 0 masks the protocol, makes it look completely random, and guards it from outside intruders
[21:23:28] BDS97: home: layer 1 takes this single, raw channel, and builds onion routes on it
[21:24:12] BDS97: home: layer 2 creates tunnels over the routes provided by layer 1, encrypting them, and mostly guarding from middle nodes
[21:25:19] BDS97: home: and layer 3 then takes these tunnels, bonds them together to virtual connections with tunnels dropping in and out all the time, and multiplexes them into surface-level channels (analogous to ports in IP)
[21:25:58] BDS97: home: then on those channels implements another level of multiplexing with the QUIC-like multiple robust streams concept
[21:26:17] BDS97: home: basically combining the advantages of TCP and UDP
[21:26:41] BDS97: home: this is where the large window size will be needed, the plan is to have it dynamically allocated when a specific stream needs high bandwidth
[21:27:12] BDS97: home: but that's still the API's task, not the user's
[21:28:22] BDS97: home: I think this will be a lot clearer when I finally finish those docs about the spec
[21:29:08] h0p3: I think you are making sense to me, although I cannot say I understand how they parts fit together.
[21:29:15] h0p3: all the way down*
[21:29:41] BDS97: home: yeah, that's the problem, I don't feel like I can explain it well enough without the verbosity of those documents
[21:30:05] BDS97: home: currently, most of it is in my head, and I have a few lines on my whiteboard where I sketched up the packet format
[21:30:53] h0p3: I appreciate that. I am grateful to have the chance to think about it too. I realize we're still planning.
[21:32:24] h0p3: Uh, so this might be a dumb question: but how hard is it to make a program that talks TCP just use Atropos? Can we take old software not designed for Atropos and easily make it connect over it? Backwards compatibility like that may be a defining feature. It will leave no doubt as to what should be the alpha and omega network tool. I suppose such a thing has to be integrated into the OS. 
[21:33:15] BDS97: home: I think we'll be able to easily emulate both TCP and UDP connections
[21:33:37] BDS97: home: but APIs will definitely have to be switched out
[21:33:58] BDS97: home: when you use TCP, you're basically using a single stream
[21:34:43] BDS97: home: with layer 3, we can just say "okay, so stream 0 is our TCP connection", and just put everything through that that would otherwise go over TCP
[21:35:45] BDS97: home: but I wouldn't count out a specific program either that basically translates Atropos to TCP without having to touch the old app at all
[21:36:38] h0p3: if there is not a significant loss in performance, that translation will bust Atropos' usability wide open. 
[21:37:14] h0p3: The goal, imho, isn't just to make it so new devs can build Atropos library into their software, but to even make it part of the fabric of all routing and OSes, make it invisible.
[21:38:01] BDS97: home: IP over Atropos?
[21:39:01] h0p3: Seems like it.
[21:39:32] h0p3: The bridge into inevitability would require that Atropos is so well-integrated into my system that it naturally grants backward compatibility to everything.
[21:39:54] h0p3: There can never be a reason not to Switch to the next version of Windows, hence the backward compatibility from M$. 
[21:40:04] BDS97: home: yeah, I see
[21:40:39] BDS97: home: I think using Atropos instead of TCP would make a lot of sense when you're developing something
[21:40:46] BDS97: home: a Layer 3 stream has all of TCP's guarantees
[21:41:04] h0p3: yes, I agree, Atropos native is going to be better than this emulation. 
[21:41:05] BDS97: home: plus it's less likely to bottleneck, guarantees security, and even punches through firewalls
[21:41:39] BDS97: home: but yeah, we could definitely make a generic virtual ethernet port that communicates over Atropos
[21:42:24] BDS97: home: on the "cons" side, you have a 6-7% overhead assuming an average layer 0 packet size of 1250
[21:42:46] BDS97: home: that can be reduced a lot, for example it's only 3.3% with a packet size of 3000
[21:43:08] BDS97: home: on the "pros" side, you don't have to worry about a lot of stuff you would otherwise need for networking
[21:43:26] BDS97: home: for example the whole security and encryption aspect, Atropos already does that for you
[21:44:06] h0p3: no need for HTTPS...if webservers came with Atropos, those connecting over Atropos might still get better speed.
[21:44:54] BDS97: home: yeah, exactly, this might very well remove the need for TLS
[21:45:02] BDS97: home: the signature scheme will likely remaiin
[21:45:07] BDS97: home: *remain
[21:45:21] BDS97: home: had to remove like 3-4 double keystrokes from that message
[21:46:08] BDS97: home: it will be especially useful in peer-to-peer situations
[21:46:16] BDS97: home: for example, let's say you're making a video chat app
[21:46:35] BDS97: home: most of the time you don't want that to go over your servers because that's a lot of bandwidth
[21:47:19] BDS97: home: with Atropos, you'll be able to just grab some node IDs and set up a peer-to-peer connection as easily as you connect today to an HTTP server
[21:48:25] BDS97: home: no need for the intricacies of WebRTC or other kinds of NAT punchthrough because Atropos is already designed to punch through anything that tries to block the connection
[21:48:43] BDS97: home: whether that's just a weird NAT setup or the Great Chinese Firewall
[21:49:14] BDS97: home: *Great Firewall of China or whatever
[21:49:46] BDS97: home: speaking of which, VPN over Atropos is also important, but that's basically just an endpoint for IP over Atropos
[21:50:14] BDS97: home: it's the Hamachi-like stuff, and I think that should be our next goal as soon as we got the Rhizome going
[21:51:28] h0p3: aye
[21:51:37] BDS97: home: anyway, signing off, it is getting very late here
[21:51:40] BDS97: home: talk to you tomorrow
[21:51:41] h0p3: night, sleep well
[21:51:49] BDS97: home: thanks
[21:51:54] BDS97: home: have a nice evening you too